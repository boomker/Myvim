
colorscheme solarized
set t_Co=256                   " 在终端启用256色
set mousef                     "启用光标激活pane
set guifont=Source_Code_Pro_Semibold_for_Powerline:h15

set number                                            "显示行号
" set relativenumber                                    "启用相对行号"
set wrap                                              "设置自动折行
" set nolinebreak                                       "不自动换行
set shortmess=atI                                     "去掉欢迎界面
set guioptions-=m                                     "去掉菜单栏"
set guioptions-=e                                     "去掉标签栏"
set guioptions-=T                                     "去掉工具栏"
set guioptions-=r                                     "去掉右边(下行是去左边的)的滚动条"
set guioptions-=L
set laststatus=2                                      "启用状态栏信息
set showtabline=2                                     "当只有一个标签时也显示标签行
set magic                                             "打开正则匹配模式
set noimd                                             "关闭输入法

set nobomb
set termencoding=utf-8
set encoding=utf-8                                    "设置gvim内部编码
set fileencoding=utf-8                                "设置此缓冲区所在文件的字符编码
set fileencodings=utf-8,cp936,ucs-bom,gb18030,gb2312  "设置支持打开的文件的编码
set fileformat=mac
set fileformats=mac,unix,dos                            "给出文件的<EOL>格式类型
" 下面两行至于此是为解决右键菜单乱码问题
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

set nocompatible                                      "禁用 Vi 兼容模式
set backspace=indent,eol,start
set viewoptions=folds,options,cursor,unix,slash       "better unix/Windows compatible
set virtualedit=onemore                               "curso可以移动到行尾最后一个字符之后"
set autoindent
set smartindent                                       "启用智能对齐方式
set smarttab                                          "指定行首按一次backspace就删除shiftwidth宽度的空格
set expandtab                                        "将Tab键转换为空格
set tabstop=4                                         "设置Tab键的宽度
set softtabstop=4
set shiftwidth=4                                      "换行时自动缩进4个空格
set scrolloff=3                                         "上下滚动时当前行距顶或低保持有3行"
set cursorline                                          "突出显示当前行
set foldenable                                          "启用折叠
set foldmethod=indent                                   "indent 折叠方式
"set foldopen=all                                        "光标移到折叠时自动打开
"set foldclose=all
set autoread                                            "当文件在外部被修改，自动更新该文件
set clipboard=unnamed                                   "与其他应用共享剪贴板,抽出和粘贴选择内容,而无须在这些命令前面附加"*.
au BufRead,BufNewFile,BufEnter * cd %:p:h               "自动切换到正在编辑文件所在的目录
" 启用每行超过78列的字符提示(字体变蓝并加下划线)
au BufWinEnter * let w:m2=matchadd('Underlined', '\%>' . 78 . 'v.\+', -1)

set hlsearch                                "高亮搜索
set incsearch                               "在输入要搜索的文字时，实时匹配
set ignorecase                              "搜索模式里忽略大小写
set smartcase                               "搜索模式包含大写字符，忽略上一行设置
set matchtime=6                             "匹配括号光标停留时间"
set showmatch
set history=500                             "保存更多的history"
set wildmenu
set vb t_vb=                                "关闭提示音
set nobackup                                "设置无备份文件
set noswapfile                              "设置无临时文件
set nowritebackup                           "无写入备份

let mapleader = ","
inoremap <ESC> <ESC>

noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

nmap J gJ
nmap sf :w!<CR>

nmap ye y$
nmap yh y^
"将本行复制到寄存器里面并粘贴到下行
nmap yp mYyyp`Yj

nmap ge $
nmap gh ^

nmap tn :tabnew!<CR>
nmap tp <S-End><C-v>

xnoremap p "0p
nmap d<CR> dG
nmap dj 2dd
nmap dk k2dd
nmap y<CR> yG
nmap yj 2yy
nmap yk k2yy
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zO')<CR>

"Smart way to move between windows 分屏窗口移动
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>
noremap <leader>bf :tabfirst<cr>
noremap <leader>bl :tablast<cr>
noremap <leader>bb :tabprev<cr>
noremap <leader>bn :tabnext<cr>
noremap <leader>bm :tabmove

" 常规模式下输入 cS 清除行尾空格
nnoremap <Leader>ds :%s/\s\+$//g<cr>:w!<CR>''

" 常规模式下输入 cM 清除行尾 ^M 符号
nnoremap <Leader>dm :%s/\r$//g<CR>:w!<CR>''

" convert tab to space
noremap <Leader>tcs :%s/\v\t/    /g<CR>

autocmd BufNewFile *.sh,*.py exec ":call SetFileHeadTitle()"
func! SetFileHeadTitle()
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/python")
        call setline(2, "\# Description: ")
        call setline(3, "\# Author: boomker")
        call setline(4, "\# Mail: 15800545854@139.com")
        call setline(5, "\# Date: strftime("%Y-%m-%d %H:%M")")
        normal Go
    endif
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
        call setline(2, "\# Description: ")
        call setline(3, "\# Author: boomker")
        call setline(4, "\# Mail: 15800545854@139.com")
        call setline(5, "\# Date: strftime("%Y-%m-%d %H:%M")")
        normal Go
    endif
endfunction

" ctrlP configure:
    let g:ctrlp_map = '<Leader>gf'
    map <leader>sm :CtrlPMRU<CR>
    let g:ctrlp_by_filename = 1
    let g:ctrlp_mruf_case_sensitive = 1
    let g:ctrlp_cache_dir = '$VIM/vimfiles/tmp/ctrlp'
    let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
    let g:ctrlp_custom_ignore = '\v[\/]\.(exe|so|dll|tar|tar.gz|iso|ipk)$'
    set wildignore+=*\\tmp\\*,*.swp,*.zip,*.rar,*.7z,*.dat,*.ico,*pyc

" vim easymotion configure: --改标记按键顺序
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_leader_key = 'f'
    let g:EasyMotion_startofline = '0'
    map fu <Plug>(easymotion-F)
    map f/ <Plug>(easymotion-tn)
    map fl <Plug>(easymotion-lineforward)
    map fh <Plug>(easymotion-linebackward)

" auto-pairs configure:
    let g:AutoPairsFlyMode = 0
    " let g:AutoPairsShortcutBackInsert = '<M-b>'
    " let g:AutoPairsShortcutToggle = '<Leader>pt'

" airline configure:
    " let g:airline_theme = 'solarized'                设置主题
    let g:airline_powerline_fonts = 1
    let g:airline_right_sep = '◀'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tavline#enabled = 1
    let g:airline#extensions#syntastic#enabled = 1
    let g:airline#extensions#tagbar#enabled = 1
    let g:airline#extensions#tagbar#flags = 'f'
    let g:airline#extensions#tabline#show_close_button = 0
    let g:airline#extensions#tabline#fnametruncate = 1
    let g:airline#extensions#tabline#formatter = 'unique_tail'
    let g:airline#extensions#tabline#tab_nr_type = 1
    " let g:airline#extensions#tabline#tab_nr_type = 2 splits and tab number
    let g:airline#extensions#whitespace#symbol = '!'
    let g:airline#extensions#whitespace#enabled = 1
    let g:airline_section_b = '%{strftime("%H:%M")}'
    "let g:airline_section_c = '%{CurDir()}\%t'
    let g:airline_section_y = 'BN: %{bufnr("%")}'

" neocomplete configure:
    " 打开vim自动启用neocomplete
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    " Define dictionary.
    let g:neocomplete#data_directory = $VIM.'/vimfiles/tmp/neocomplete'
    let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'autohotkey' : $VIM.'/vimfiles/dict/AutoHotkey',
            \ }
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'
    " Plugin key-mappings.
    "inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()
    " Recommended key-mappings. <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return neocomplete#close_popup() .\<CR>"
      " For no inserting <CR> key.
      return pumvisible() ? neocomplete#close_popup() :\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ?\<C-n>" :\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    " inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-u>  neocomplete#close_popup()
    inoremap <expr><A-u>  neocomplete#cancel_popup()
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() :\<Space>"
    " For cursor moving in insert mode(Not recommended)
    "inoremap <expr><Left>  neocomplete#close_popup() .\<Left>"
    "inoremap <expr><Right> neocomplete#close_popup() .\<Right>"
    "inoremap <expr><Up>    neocomplete#close_popup() .\<Up>"
    "inoremap <expr><Down>  neocomplete#close_popup() .\<Down>"
    " Or set this.
    " let g:neocomplete#enable_cursor_hold_i = 1
    " Or set this.
    " let g:neocomplete#enable_insert_char_pre = 1
    " 像AutoComplPop一样自动选中第一项
    " let g:neocomplete#enable_auto_select = 1
    " Shell like behavior(not recommended).
    set completeopt+=longest
    "let g:neocomplete#disable_auto_complete = 1
    "inoremap <expr><TAB>  pumvisible() ?\<Down>" :\<C-x>\<C-u>"
    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
    endif

"  < Plug or Vundle 插件管理工具配置 >
call plug#begin('$VIM/vimfiles/bundle')
    " Plugin 'VundleVim/Vundle.vim'
    " Plug 'tpope/vim-fugitive'
    Plug 'easymotion/vim-easymotion'
    Plug 'vim-airline/vim-airline'
    " Plug 'plasticboy/vim-markdown'
    " Plug 'dimasg/vim-mark'
    " Plug 'rkulla/pydiction'
    " Plug 'nvie/vim-flake8'
    " Plug 'tell-k/vim-autopep8'
    " Plug 'vim-scripts/indentpython.vim'
    " Plug 'edkolev/tmuxline.vim'
    " Plug '$VIM/vimfiles/bundle/txtbrowser'
    " Plug 'txtbrowser'
    " Plug 'vim-scripts/taglist.vim'
    "Plug 'petdance/ack2'
    Plug 'dkprice/vim-easygrep'
    " Plug 'majutsushi/tagbar'
    " Plug 'junegunn/vim-easy-align'
    " Plug 'justinmk/vim-sneak'
    Plug 'jiangmiao/auto-pairs'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-repeat'
    " Plug 'Valloric/YouCompleteMe'
    Plug 'Shougo/neocomplete.vim'
    " Plug 'Shougo/neosnippet.vim'
    " Plug 'Shougo/neosnippet-snippets'
    Plug 'scrooloose/syntastic'
    " Plug 'w0rp/ale'
    Plug 'scrooloose/nerdcommenter'
    " Plug 'scrooloose/nerdtree'
    Plug 'dyng/ctrlsf.vim'
    " Plug 'junegunn/fzf', { 'dir': '$VIM/vimfiles/bundle/fzf', 'do': './install --all'  }
    Plug 'ctrlpvim/ctrlp.vim'
    " Plug 'mbbill/undotree'
    Plug 'yonchu/accelerated-smooth-scroll'
    " Plug 'nathanaelkane/vim-indent-guides'
    " Plug 'pearofducks/ansible-vim'
call plug#end()
